#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Yijun Li 516030910395
#
# Describe how and why you modified the baseline code.
# 1. Use iaddq
# 2. Expand loops to 8 blocks a time
# 3. Linear check remaining small cases to separate mr and rm
# 4. Change prediction to jge when dealing with remaining blocks (0,1,2,3,..7)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	iaddq $-8, %rdx
	andq %rdx,%rdx		# len-8 <= 0?
	jl Rest		

Loop:	
	mrmovq (%rdi), %r10	 # read val from src...
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r13
	mrmovq 32(%rdi), %r14
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %rcx	
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, 16(%rsi)
	andq %r10, %r10  # val <= 0?
	jle NposA		# if so, goto NposA:
	iaddq $1, %rax		# count++
NposA:	
	
	andq %r11, %r11
	jle NposB
	iaddq $1, %rax
NposB:
	andq %r12, %r12
	rmmovq %r13, 24(%rsi)
	jle NposC
	iaddq $1, %rax
NposC:
	rmmovq %r14, 32(%rsi)
	andq %r13, %r13
	jle NposD
	iaddq $1, %rax
NposD:
	rmmovq %r9, 40(%rsi)
	andq %r14, %r14
	jle NposE
	iaddq $1, %rax
NposE:
	rmmovq %r8, 48(%rsi)
	andq %r9, %r9
	jle NposF
	iaddq $1, %rax
NposF:
	rmmovq %rcx, 56(%rsi)
	andq %r8, %r8
	jle NposG
	iaddq $1, %rax
NposG:
	andq %rcx, %rcx
	jle New
	iaddq $1, %rax

New:
	iaddq $0x40, %rdi		# src++
	iaddq $0x40, %rsi		# dst++
	iaddq $-8, %rdx		# len--
	jge Loop			# if so, goto Loop:

Rest:  # Register order: r10, r11, r12, r13, r14, r9, r8
	iaddq $7, %rdx # restore len
	jge Npos_0 # %rdx != 0
	ret
Npos_0:
	# %rdx==1,2,3,4,5
	mrmovq (%rdi), %r10
	mrmovq 8(%rdi), %r11
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Npos_1 # (%rdi) <= 0 doesn't count 
	iaddq $1 ,%rax

Npos_1:
	iaddq $-1, %rdx
	jge Npos_11 # %rdx ==1
	ret
Npos_11:
	rmmovq %r11, 8(%rsi) # %rdx ==2
	andq %r11,%r11
	jle Npos_2
	iaddq $1, %rax

Npos_2:
	mrmovq 16(%rdi), %r12
	iaddq $-1, %rdx
	jge Npos_22 # %rdx ==1
	ret
Npos_22:
	rmmovq %r12, 16(%rsi) # %rdx ==3
	andq %r12,%r12
	jle Npos_3
	iaddq $1, %rax

Npos_3:
	mrmovq 24(%rdi), %r13
	iaddq $-1, %rdx
	jge Npos_33 # %rdx ==1
	ret
Npos_33:
	rmmovq %r13, 24(%rsi) # %rdx ==4
	andq %r13,%r13
	jle Npos_4
	iaddq $1, %rax
	
Npos_4:
	mrmovq 32(%rdi), %r14
	iaddq $-1, %rdx
	jge Npos_44
	ret
Npos_44:
	rmmovq %r14, 32(%rsi) # %rdx =5
	andq %r14,%r14
	jle Npos_5
	iaddq $1, %rax

Npos_5:
	mrmovq 40(%rdi), %r9
	iaddq $-1, %rdx
	jl Done
	rmmovq %r9, 40(%rsi) # %rdx =6
	andq %r9,%r9
	jle Npos_6
	iaddq $1, %rax

Npos_6:
	mrmovq 48(%rdi), %r8
	iaddq $-1, %rdx
	jl Done
	rmmovq %r8, 48(%rsi) # %rdx =7
	andq %r8,%r8
	jle New
	iaddq $1, %rax
	ret
rest1:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
