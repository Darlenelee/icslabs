                            | #######################################################################
                            | # Test for copying block of size 3;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20300000000000000 | 	irmovq $3, %rdx		# src and dst have 3 elements
0x014: 30f6f804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 806903000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Yijun Li 516030910395
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Use iaddq
                            | # 2. Expand loops to 8 blocks a time
                            | # 3. Linear check remaining small cases to separate mr and rm
                            | # 4. Change prediction to jge when dealing with remaining blocks (0,1,2,3,..7)
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 6222                 | 	andq %rdx,%rdx		# len-8 <= 0?
0x047: 72bf01000000000000   | 	jl Rest		
                            | 
0x050:                      | Loop:	
0x050: 50a70000000000000000 | 	mrmovq (%rdi), %r10	 # read val from src...
0x05a: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x064: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x06e: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x078: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14
0x082: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x08c: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x096: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx	
                            | 
0x0a0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0aa: 62aa                 | 	andq %r10, %r10  # val <= 0?
0x0ac: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x0b6: 71c900000000000000   | 	jle NposA		# if so, goto NposA:
0x0bf: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c9:                      | NposA:	
0x0c9: 62bb                 | 	andq %r11, %r11
0x0cb: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x0d5: 71e800000000000000   | 	jle NposB
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
0x0e8:                      | NposB:
0x0e8: 62cc                 | 	andq %r12, %r12
0x0ea: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x0f4: 710701000000000000   | 	jle NposC
0x0fd: c0f00100000000000000 | 	iaddq $1, %rax
0x107:                      | NposC:
0x107: 62dd                 | 	andq %r13, %r13
0x109: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)
0x113: 712601000000000000   | 	jle NposD
0x11c: c0f00100000000000000 | 	iaddq $1, %rax
0x126:                      | NposD:
0x126: 62ee                 | 	andq %r14, %r14
0x128: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x132: 714501000000000000   | 	jle NposE
0x13b: c0f00100000000000000 | 	iaddq $1, %rax
0x145:                      | NposE:
0x145: 6299                 | 	andq %r9, %r9
0x147: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x151: 716401000000000000   | 	jle NposF
0x15a: c0f00100000000000000 | 	iaddq $1, %rax
0x164:                      | NposF:
0x164: 6288                 | 	andq %r8, %r8
0x166: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x170: 718301000000000000   | 	jle NposG
0x179: c0f00100000000000000 | 	iaddq $1, %rax
0x183:                      | NposG:
0x183: 6211                 | 	andq %rcx, %rcx
0x185: 719801000000000000   | 	jle New
0x18e: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x198:                      | New:
0x198: c0f74000000000000000 | 	iaddq $0x40, %rdi		# src++
0x1a2: c0f64000000000000000 | 	iaddq $0x40, %rsi		# dst++
0x1ac: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x1b6: 755000000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x1bf:                      | Rest:  # Register order: r10, r11, r12, r13, r14, r9, r8
0x1bf: c0f20700000000000000 | 	iaddq $7, %rdx # restore len
0x1c9: 75d301000000000000   | 	jge Npos_0 # %rdx != 0
0x1d2: 90                   | 	ret
0x1d3:                      | Npos_0:
                            | 	# %rdx==1,2,3,4,5
0x1d3: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1dd: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x1e7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1f1: 62aa                 | 	andq %r10, %r10
0x1f3: 710602000000000000   | 	jle Npos_1 # (%rdi) <= 0 doesn't count 
0x1fc: c0f00100000000000000 | 	iaddq $1 ,%rax
                            | 
0x206:                      | Npos_1:
0x206: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x210: 751a02000000000000   | 	jge Npos_11 # %rdx ==1
0x219: 90                   | 	ret
0x21a:                      | Npos_11:
0x21a: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) # %rdx ==2
0x224: 62bb                 | 	andq %r11,%r11
0x226: 713902000000000000   | 	jle Npos_2
0x22f: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x239:                      | Npos_2:
0x239: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x243: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x24d: 755702000000000000   | 	jge Npos_22 # %rdx ==1
0x256: 90                   | 	ret
0x257:                      | Npos_22:
0x257: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) # %rdx ==3
0x261: 62cc                 | 	andq %r12,%r12
0x263: 717602000000000000   | 	jle Npos_3
0x26c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x276:                      | Npos_3:
0x276: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x280: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x28a: 759402000000000000   | 	jge Npos_33 # %rdx ==1
0x293: 90                   | 	ret
0x294:                      | Npos_33:
0x294: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi) # %rdx ==4
0x29e: 62dd                 | 	andq %r13,%r13
0x2a0: 71b302000000000000   | 	jle Npos_4
0x2a9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x2b3:                      | Npos_4:
0x2b3: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14
0x2bd: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2c7: 75d102000000000000   | 	jge Npos_44
0x2d0: 90                   | 	ret
0x2d1:                      | Npos_44:
0x2d1: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi) # %rdx =5
0x2db: 62ee                 | 	andq %r14,%r14
0x2dd: 71f002000000000000   | 	jle Npos_5
0x2e6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2f0:                      | Npos_5:
0x2f0: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2fa: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x304: 726803000000000000   | 	jl Done
0x30d: 40962800000000000000 | 	rmmovq %r9, 40(%rsi) # %rdx =6
0x317: 6299                 | 	andq %r9,%r9
0x319: 712c03000000000000   | 	jle Npos_6
0x322: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x32c:                      | Npos_6:
0x32c: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x336: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x340: 726803000000000000   | 	jl Done
0x349: 40863000000000000000 | 	rmmovq %r8, 48(%rsi) # %rdx =7
0x353: 6288                 | 	andq %r8,%r8
0x355: 719801000000000000   | 	jle New
0x35e: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x368:                      | Done:
0x368: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x369:                      | End:
                            | #/* $end ncopy-ys */
0x369:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x369:                      | check:
                            | 	# Return value test
0x369: 30fa0200000000000000 | 	irmovq $2,%r10
0x373: 61a0                 | 	subq %r10,%rax
0x375: 739103000000000000   | 	je checkb
0x37e: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x388: 70cf04000000000000   | 	jmp cdone
0x391:                      | checkb:
                            | 	# Code length check
0x391: 30f06903000000000000 | 	irmovq EndFun,%rax
0x39b: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3a5: 6120                 | 	subq %rdx,%rax
0x3a7: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3b1: 6102                 | 	subq %rax,%rdx
0x3b3: 75cf03000000000000   | 	jge checkm
0x3bc: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3c6: 70cf04000000000000   | 	jmp cdone
0x3cf:                      | checkm:
0x3cf: 30f2f804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3d9: 30f3d004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3e3: 30f70300000000000000 | 	irmovq $3,%rdi  # Count
0x3ed: 6277                 | 	andq %rdi,%rdi
0x3ef: 734d04000000000000   | 	je checkpre         # Skip check if count = 0
0x3f8:                      | mcloop:
0x3f8: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x402: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x40c: 6160                 | 	subq %rsi,%rax
0x40e: 732a04000000000000   | 	je  mok
0x417: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x421: 70cf04000000000000   | 	jmp cdone
0x42a:                      | mok:
0x42a: 30f00800000000000000 | 	irmovq $8,%rax
0x434: 6002                 | 	addq %rax,%rdx	  # dest ++
0x436: 6003                 | 	addq %rax,%rbx    # src++
0x438: 30f00100000000000000 | 	irmovq $1,%rax
0x442: 6107                 | 	subq %rax,%rdi    # cnt--
0x444: 76f803000000000000   | 	jg mcloop
0x44d:                      | checkpre:
                            | 	# Check for corruption
0x44d: 30f2f004000000000000 | 	irmovq Predest,%rdx
0x457: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x461: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x46b: 6120                 | 	subq %rdx,%rax
0x46d: 738904000000000000   | 	je checkpost
0x476: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x480: 70cf04000000000000   | 	jmp cdone
0x489:                      | checkpost:
                            | 	# Check for corruption
0x489: 30f21005000000000000 | 	irmovq Postdest,%rdx
0x493: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x49d: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4a7: 6120                 | 	subq %rdx,%rax
0x4a9: 73c504000000000000   | 	je checkok
0x4b2: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4bc: 70cf04000000000000   | 	jmp cdone
0x4c5:                      | checkok:
                            | 	# Successful checks
0x4c5: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4cf:                      | cdone:
0x4cf: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4d0:                      | 	.align 8
0x4d0:                      | src:
0x4d0: 0100000000000000     | 	.quad 1
0x4d8: feffffffffffffff     | 	.quad -2
0x4e0: 0300000000000000     | 	.quad 3
0x4e8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4f0:                      | 	.align 16
0x4f0:                      | Predest:
0x4f0: fadebc0000000000     | 	.quad 0xbcdefa
0x4f8:                      | dest:
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510:                      | Postdest:
0x510: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x518:                      | .align 8
                            | # Run time stack
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
                            | 
0x598:                      | Stack:
